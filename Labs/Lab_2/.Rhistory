quad.function <- function(input.values) {
if (is.numeric(input.values)) {
y.values <- -(input.values-1)^2+8
return(y.values)
}
else{
return("Error: only input numeric object")
}
}
quad.function("s")
quad.function(seq(from:1, to: 10, by:2))
seq(1,10,0.1)
?ifelse
nat.nums <- seq(1,10,1)
odd.even <- ifelse(nat.nums %%2==1, 0, 1)
rbind(nat.nums, odd.even)
broken.function <- function(inputs){
if(inputs==5){
return("FIVE")
}
else {
return("NOT FIVE")
}
}
broken.function(8)
broken.function2 <- function(inputs){
inputs.new <- ifelse(inputs %% 2==0, 1, 0)
return(inputs.new)
}
broken.function2(inputs)
broken.function2(c(1,2,3))
myfunction <- function(input){
if(sum(input)<=100){
return(sum(ifelse(input%%5==0, input, 0)))
}
else{
return(mean(input))
}
}
myfunction(seq(1,10,1))
myfunction(seq(1,100,1))
your.function <- function(inputs){
if(sum(inputs, na.rm=T)<=100){
sub <- subset(inputs, inputs %% 5 == 0)
sum.sub <- sum(sub)
return(sum.sub)
}
else{
mean.all <- mean(inputs, na.rm=T)
return(mean.all)
}
}
inputs1 <- seq(1,10,1)
inputs2 <- seq(1,100,1)
your.function(inputs1)
your.function(inputs2)
myfunction <- function(x.values){
y.values <- x.values^3-6*x.values^2+4*x.values+12
return(y.values)
}
x.values <-  seq(2,6,0.1)
y.values <- myfunction(x.values)
plot(x=x.values, y=y.values, type=1, xlim=c(-2,6) )
plot(x=x.values, y=y.values, type="l", xlim=c(-2,6) )
optimize(f=myfunction, interval=c(-2,6))
abline(v=3.632992, lty=2)
abline(h=-4.709297, lty=2)
optimize(f=myfunction, interval=c(0,5))
}
fun <- function(x){
y = x^3 - 6*x^2 + 4*x + 12
return(y)
}
x <- seq(-2,6,0.1)
y <- fun(x)
plot(x, y, type="l", main=expression(x^3 - 6*x^2 + 4*x + 12))
x.values <-  seq(-2,6,0.1)
y.values <- myfunction(x.values)
plot(x=x.values, y=y.values, type="l", xlim=c(-2,6) )
optimize(f=myfunction, interval=c(0,5))
abline(h=-4.709297, lty=2)
abline(v=3.632992, lty=2)
optimize(f = fun, interval=c(0,5), maximum=F)
getwd()
ls()
